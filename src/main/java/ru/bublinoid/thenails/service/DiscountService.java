package ru.bublinoid.thenails.service;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.annotation.Lazy;
import org.springframework.stereotype.Service;
import org.telegram.telegrambots.meta.api.methods.send.SendDice;
import org.telegram.telegrambots.meta.api.objects.Dice;
import org.telegram.telegrambots.meta.api.objects.Message;
import org.telegram.telegrambots.meta.exceptions.TelegramApiException;
import ru.bublinoid.thenails.telegram.TelegramBot;

import java.time.LocalDate;
import java.util.HashMap;
import java.util.Map;

@Service
public class DiscountService {

    private static final Logger logger = LoggerFactory.getLogger(DiscountService.class);

    private final TelegramBot telegramBot;
    private final MessageService messageService;

    // –•—Ä–∞–Ω–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –ø–æ—Å–ª–µ–¥–Ω–µ–π –∏–≥—Ä—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    private final Map<Long, LocalDate> lastPlayedDateMap = new HashMap<>();

    @Autowired
    public DiscountService(@Lazy TelegramBot telegramBot, MessageService messageService) {
        this.telegramBot = telegramBot;
        this.messageService = messageService;
    }

    public void playDiscountGame(Long chatId) {
        // –ü—Ä–æ–≤–µ—Ä–∫–∞, –∏–≥—Ä–∞–ª –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–µ–≥–æ–¥–Ω—è
        if (hasPlayedToday(chatId)) {
            String message = "–í—ã —É–∂–µ –∏–≥—Ä–∞–ª–∏ —Å–µ–≥–æ–¥–Ω—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –∑–∞–≤—Ç—Ä–∞!";
            messageService.sendMarkdownMessage(chatId, message);
            logger.info("User with chatId {} already played today.", chatId);
            return;
        }

        // –ë—Ä–æ—Å–∞–µ–º –ø–µ—Ä–≤—ã–π –∫—É–±–∏–∫
        int firstDiceValue = rollDice(chatId);
        if (firstDiceValue == -1) {
            return;
        }

        // –ë—Ä–æ—Å–∞–µ–º –≤—Ç–æ—Ä–æ–π –∫—É–±–∏–∫
        int secondDiceValue = rollDice(chatId);
        if (secondDiceValue == -1) {
            return;
        }

        // –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–π –∏–≥—Ä—ã
        lastPlayedDateMap.put(chatId, LocalDate.now());

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–æ–≤–ø–∞–¥–∞—é—Ç –ª–∏ –∑–Ω–∞—á–µ–Ω–∏—è
        if (firstDiceValue == secondDiceValue) {
            sendDiscountWinMessage(chatId, firstDiceValue, secondDiceValue);
        } else {
            sendNoDiscountMessage(chatId, firstDiceValue, secondDiceValue);
        }
    }

    private boolean hasPlayedToday(Long chatId) {
        LocalDate lastPlayedDate = lastPlayedDateMap.get(chatId);
        return lastPlayedDate != null && lastPlayedDate.equals(LocalDate.now());
    }

    private int rollDice(Long chatId) {
        SendDice sendDice = new SendDice();
        sendDice.setChatId(chatId);
        sendDice.setEmoji("üé≤");  // –ò–≥—Ä–∞–ª—å–Ω–∞—è –∫–æ—Å—Ç—å

        try {
            Message message = telegramBot.execute(sendDice); // –û—Ç–ø—Ä–∞–≤–∫–∞ –∞–Ω–∏–º–∞—Ü–∏–∏ –∏–≥—Ä–∞–ª—å–Ω–æ–π –∫–æ—Å—Ç–∏
            return message.getDice().getValue();
        } catch (TelegramApiException e) {
            logger.error("Error occurred while sending dice: ", e);
            return -1; // –í–æ–∑–≤—Ä–∞—â–∞–µ–º -1 –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
        }
    }

    private void sendDiscountWinMessage(Long chatId, int firstDiceValue, int secondDiceValue) {
        String message = "–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í–∞–º –≤—ã–ø–∞–ª–æ –¥–≤–∞ –∫—É–±–∏–∫–∞ —Å –æ–¥–∏–Ω–∞–∫–æ–≤—ã–º –∑–Ω–∞—á–µ–Ω–∏–µ–º " + firstDiceValue +
                ". –í—ã –≤—ã–∏–≥—Ä–∞–ª–∏ —Å–∫–∏–¥–∫—É 15%!";
        messageService.sendMarkdownMessage(chatId, message); // –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ MessageService
        logger.info("Sent discount win message to chatId {}: {}", chatId, message);
    }

    private void sendNoDiscountMessage(Long chatId, int firstDiceValue, int secondDiceValue) {
        String message = "–í–∞–º –≤—ã–ø–∞–ª–æ " + firstDiceValue + " –∏ " + secondDiceValue +
                ". –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —Å–∫–∏–¥–∫—É –≤—ã–∏–≥—Ä–∞—Ç—å –Ω–µ —É–¥–∞–ª–æ—Å—å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —á–µ—Ä–µ–∑ 24 —á–∞—Å–∞!";
        messageService.sendMarkdownMessage(chatId, message); // –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ MessageService
        logger.info("Sent no discount message to chatId {}: {}", chatId, message);
    }
}
